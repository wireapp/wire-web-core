/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */

import {Decoder, Encoder} from '@wireapp/cbor';
import {CipherKey} from '../derived/CipherKey';
import {DerivedSecrets} from '../derived/DerivedSecrets';
import {KeyPair} from '../keys/KeyPair';
import {PublicKey} from '../keys/PublicKey';
import {SecretKey} from '../keys/SecretKey';
import {ChainKey} from './ChainKey';
import {InputError} from "../errors/InputError";
import { DecodeError } from '../errors/DecodeError';

export class RootKey {
  readonly key: CipherKey;
  private static readonly propertiesLength = 1;

  constructor(key: CipherKey) {
    this.key = key;
  }

  /**
   * @param cipherKey Cipher key generated by derived secrets
   */
  static from_cipher_key(cipherKey: CipherKey): RootKey {
    return new RootKey(cipherKey);
  }

  /**
   * @param ours Our key pair
   * @param theirs Their public key
   */
  dh_ratchet(ours: KeyPair, theirs: PublicKey): [RootKey, ChainKey] {
    const secret = SecretKey.shared_secret(theirs, ours.secret_key);
    const derivedSecrets = DerivedSecrets.kdf(secret, this.key.key, 'dh_ratchet');

    return [RootKey.from_cipher_key(derivedSecrets.cipher_key), ChainKey.from_mac_key(derivedSecrets.mac_key, 0)];
  }

  static encode(encoder: Encoder, rootKey: RootKey): Encoder {
    encoder.object(RootKey.propertiesLength);
    encoder.u8(0);
    return CipherKey.encode(encoder, rootKey.key);
  }

  static decode(decoder: Decoder): RootKey {
    const propertiesLength = decoder.object();
    if (propertiesLength === RootKey.propertiesLength) {
      decoder.u8();
      const cipherKey = CipherKey.decode(decoder);

      if (cipherKey) {
        return RootKey.from_cipher_key(cipherKey);
      }

      throw new InputError.TypeError(`Given RootKey doesn't match expected signature.`, InputError.CODE.CASE_407);
    }
    throw new DecodeError(`Unexpected number of properties: "${propertiesLength}"`);
  }
}
